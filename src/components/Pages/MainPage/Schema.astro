---
import { Code } from "astro-expressive-code/components";
---

<!-- Schema -->
<section id="schema" class="mx-auto max-w-6xl px-4 sm:px-6 py-14">
  <h2 class="text-2xl font-bold">Response schema</h2>
  <p class="mt-2 text-gray-600 text-sm">
    All values are returned as strings or numbers suitable for <span
      class="font-mono">postgresql.conf</span
    >. You can template or write them directly.
  </p>
  <div class="mt-4 grid lg:grid-cols-2 gap-6">
    <Code
      class="overflow-x-auto"
      title="JSON Schema"
      code={`{
  "config": {
    "checkpoint_timeout": duration,
    "checkpoint_completion_target": float,
    "wal_compression": on | off,
    "wal_buffers": size,
    "wal_writer_delay": duration,
    "wal_writer_flush_after": size,
    "shared_preload_libraries": string,
    "track_io_timing": on | off,
    "track_functions": string,
    "max_worker_processes": int,
    "max_parallel_workers_per_gather": int,
    "max_parallel_workers": int,
    "bgwriter_delay": duration,
    "bgwriter_lru_maxpages": int,
    "bgwriter_lru_multiplier": float,
    "bgwriter_flush_after": int,
    "enable_partitionwise_join": on | off,
    "enable_partitionwise_aggregate": on | off,
    "jit": on | off,
    "track_wal_io_timing": on | off,
    "wal_recycle": on | off,
    "max_slot_wal_keep_size": size,
    "archive_mode": on | off | undefined,
    "archive_command": string | undefined,
    "min_wal_size": size,
    "max_wal_size": size,
    "max_parallel_maintenance_workers": int,
    "wal_level": string | undefined,
    "max_wal_senders": int,
    "max_connections": int,
    "superuser_reserved_connections": int,
    "shared_buffers": size,
    "effective_cache_size": size,
    "maintenance_work_mem": size,
    "huge_pages": try | off,
    "default_statistics_target": int,
    "random_page_cost": float,
    "wal_keep_size": size,
    "effective_io_concurrency": int,
    "work_mem": size 
  },
  "warnings": [string] | undefined
}`}
      lang="json"
    />
    <Code
      title="Example response"
      class="overflow-x-auto"
      code={`{
  "config": {
    "checkpoint_timeout": "15min",
    "checkpoint_completion_target": 0.9,
    "wal_compression": "on",
    "wal_buffers": -1,
    "wal_writer_delay": "200ms",
    "wal_writer_flush_after": "1MB",
    "shared_preload_libraries": "'pg_stat_statements'",
    "track_io_timing": "on",
    "track_functions": "pl",
    "max_worker_processes": 8,
    "max_parallel_workers_per_gather": 2,
    "max_parallel_workers": 8,
    "bgwriter_delay": "200ms",
    "bgwriter_lru_maxpages": 100,
    "bgwriter_lru_multiplier": 2.0,
    "bgwriter_flush_after": 0,
    "enable_partitionwise_join": "on",
    "enable_partitionwise_aggregate": "on",
    "jit": "on",
    "track_wal_io_timing": "on",
    "wal_recycle": "on",
    "max_slot_wal_keep_size": "1GB",
    "archive_mode": "on",
    "archive_command": "/bin/true",
    "min_wal_size": "1GB",
    "max_wal_size": "4GB",
    "max_parallel_maintenance_workers": 2,
    "wal_level": "minimal",
    "max_wal_senders": 0,
    "max_connections": 100,
    "superuser_reserved_connections": 3,
    "shared_buffers": "1GB",
    "effective_cache_size": "3GB",
    "maintenance_work_mem": "256MB",
    "huge_pages": "try",
    "default_statistics_target": 100,
    "random_page_cost": 1.1,
    "wal_keep_size": "3GB",
    "effective_io_concurrency": 200,
    "work_mem": "16MB"
  },
  "warnings": [
    "WARNING this tool not being optimal for very high memory systems"
  ]
}`}
      lang="json"
    />
  </div>
</section>
